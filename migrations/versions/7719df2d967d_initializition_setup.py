"""initializition setup

Revision ID: 7719df2d967d
Revises:
Create Date: 2025-09-10 14:59:14.285020

"""

from collections.abc import Sequence
import logging

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text

# import sqlmodel

logger = logging.getLogger(__name__)

# Revision identifiers, used by Alembic.
revision: str = "7719df2d967d"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Apply schema changes.

    Example:
        op.create_table(
            "user",
            sa.Column("id", sa.Integer, primary_key=True),
            sa.Column("name", sa.String, nullable=False),
        )
    """
    # ### commands auto generated by Alembic - please adjust! ###
    _ = op.create_table('AUTH_USER',
        sa.Column('N_IN_USED', sa.Integer(), server_default='1', nullable=False),
        sa.Column('D_CREATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_UPDATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_DELETED_AT', sa.DateTime(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('C_AUTH_ID', sa.String(length=64), nullable=False),
        sa.Column('C_AUD', sa.String(length=32), nullable=False),
        sa.Column('C_ROLE', sa.String(length=32), nullable=False),
        sa.Column('C_EMAIL', sa.String(length=256), nullable=False),
        sa.Column('D_EMAIL_CONFIRMED_AT', sa.DateTime(), nullable=True),
        sa.Column('C_PHONE', sa.String(length=32), nullable=True),
        sa.Column('D_CONFIRMED_AT', sa.DateTime(), nullable=True),
        sa.Column('D_LAST_SIGN_IN_AT', sa.DateTime(), nullable=True),
        sa.Column('B_IS_ANONYMOUS', sa.Boolean(), server_default='0', nullable=False),
        sa.Column('D_AUTH_CREATED_AT', sa.DateTime(), nullable=True),
        sa.Column('D_AUTH_UPDATED_AT', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('C_AUTH_ID', name='uk_auth_user_auth_id')
    )
    op.create_index('idx_auth_user_email', 'AUTH_USER', ['C_EMAIL'], unique=False)
    op.create_index('idx_auth_user_role', 'AUTH_USER', ['C_ROLE'], unique=False)

    _ = op.create_table('AUTH_USER_IDENTITY',
        sa.Column('N_IN_USED', sa.Integer(), server_default='1', nullable=False),
        sa.Column('D_CREATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_UPDATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_DELETED_AT', sa.DateTime(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('C_IDENTITY_ID', sa.String(length=64), nullable=False),
        sa.Column('C_USER_AUTH_ID', sa.String(length=64), nullable=False),
        sa.Column('C_PROVIDER_USER_ID', sa.String(length=128), nullable=False),
        sa.Column('C_PROVIDER', sa.String(length=32), nullable=False),
        sa.Column('C_EMAIL', sa.String(length=256), nullable=True),
        sa.Column('D_LAST_SIGN_IN_AT', sa.DateTime(), nullable=True),
        sa.Column('D_IDENTITY_CREATED_AT', sa.DateTime(), nullable=True),
        sa.Column('D_IDENTITY_UPDATED_AT', sa.DateTime(), nullable=True),
        sa.Column('C_IDENTITY_DATA', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('C_IDENTITY_ID', name='uk_user_identity_identity_id'),
        sa.UniqueConstraint('C_USER_AUTH_ID', 'C_PROVIDER', name='uk_user_identity_user_provider')
    )
    op.create_index('idx_user_identity_provider', 'AUTH_USER_IDENTITY', ['C_PROVIDER'], unique=False)
    op.create_index('idx_user_identity_user_id', 'AUTH_USER_IDENTITY', ['C_USER_AUTH_ID'], unique=False)

    _ = op.create_table('AUTH_USER_METADATA',
        sa.Column('N_IN_USED', sa.Integer(), server_default='1', nullable=False),
        sa.Column('D_CREATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_UPDATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_DELETED_AT', sa.DateTime(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('C_USER_AUTH_ID', sa.String(length=64), nullable=False),
        sa.Column('C_METADATA_TYPE', sa.String(length=32), nullable=False),
        sa.Column('C_KEY', sa.String(length=128), nullable=False),
        sa.Column('C_VALUE', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('C_USER_AUTH_ID', 'C_METADATA_TYPE', 'C_KEY', name='uk_user_metadata_user_type_key')
    )
    op.create_index('idx_user_metadata_type', 'AUTH_USER_METADATA', ['C_METADATA_TYPE'], unique=False)
    op.create_index('idx_user_metadata_user_id', 'AUTH_USER_METADATA', ['C_USER_AUTH_ID'], unique=False)

    _ = op.create_table('AUTH_USER_PROFILE',
        sa.Column('N_IN_USED', sa.Integer(), server_default='1', nullable=False),
        sa.Column('D_DELETED_AT', sa.DateTime(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('C_USER_AUTH_ID', sa.String(length=64), nullable=False),
        sa.Column('C_FIRST_NAME', sa.String(length=128), nullable=True),
        sa.Column('C_LAST_NAME', sa.String(length=128), nullable=True),
        sa.Column('C_DISPLAY_NAME', sa.String(length=256), nullable=True),
        sa.Column('C_AVATAR_URL', sa.String(length=512), nullable=True),
        sa.Column('C_BIO', sa.Text(), nullable=True),
        sa.Column('C_LOCATION', sa.String(length=256), nullable=True),
        sa.Column('C_WEBSITE', sa.String(length=256), nullable=True),
        sa.Column('D_CREATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_UPDATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('C_USER_AUTH_ID', name='uk_user_profile_user_auth_id')
    )
    op.create_index('idx_user_profile_user_auth_id', 'AUTH_USER_PROFILE', ['C_USER_AUTH_ID'], unique=False)

    _ = op.create_table('AUTH_USER_ROLE',
        sa.Column('N_IN_USED', sa.Integer(), server_default='1', nullable=False),
        sa.Column('D_CREATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_UPDATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_DELETED_AT', sa.DateTime(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('C_USER_AUTH_ID', sa.String(length=64), nullable=False),
        sa.Column('C_ROLE', sa.String(length=32), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('C_USER_AUTH_ID', 'C_ROLE', name='uk_user_role_user_role')
    )
    op.create_index('idx_user_role_role', 'AUTH_USER_ROLE', ['C_ROLE'], unique=False)
    op.create_index('idx_user_role_user_auth_id', 'AUTH_USER_ROLE', ['C_USER_AUTH_ID'], unique=False)

    _ = op.create_table('SYS_DICT',
        sa.Column('N_IN_USED', sa.Integer(), server_default='1', nullable=False),
        sa.Column('D_CREATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_UPDATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_DELETED_AT', sa.DateTime(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('C_CATEGORY', sa.String(length=64), nullable=False),
        sa.Column('N_KEY', sa.Integer(), nullable=False),
        sa.Column('C_VALUE', sa.String(length=64), nullable=False),
        sa.Column('N_ORDER', sa.Integer(), server_default='0', nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('C_CATEGORY', 'N_KEY', name='uk_sys_dict_category_key')
    )
    op.create_index('idx_sys_dict_category', 'SYS_DICT', ['C_CATEGORY'], unique=False)

    _ = op.create_table('SYS_MAP',
        sa.Column('N_IN_USED', sa.Integer(), server_default='1', nullable=False),
        sa.Column('D_CREATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_UPDATED_AT', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('D_DELETED_AT', sa.DateTime(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('C_CATEGORY', sa.String(length=64), nullable=False),
        sa.Column('C_LEFT', sa.String(length=64), nullable=False),
        sa.Column('C_RIGHT', sa.String(length=64), nullable=False),
        sa.Column('N_ORDER', sa.Integer(), server_default='0', nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('C_CATEGORY', 'C_LEFT', 'C_RIGHT', name='uk_sys_map_category_left_right')
    )
    op.create_index('idx_sys_map_category', 'SYS_MAP', ['C_CATEGORY'], unique=False)
    # ### end Alembic commands ###

    # Add metadata into SYS_MAP table
    conn = op.get_bind()
    result = conn.execute(
        text("""
        INSERT INTO SYS_MAP (C_CATEGORY, C_LEFT, C_RIGHT, N_ORDER) VALUES
        ('tag_role', 'sys', 'developer', 1),
        ('tag_role', 'dev', 'developer', 2),
        ('tag_role', 'auth', 'developer', 3),
        ('tag_role', 'auth', 'default', 4);
        """)
    )
    result = conn.execute(
        text("""
        INSERT INTO SYS_DICT (C_CATEGORY, N_KEY, C_VALUE, N_ORDER) VALUES
        ('user_role', 10, 'default', 1),
        ('user_role', 20, 'developer', 2);
        """)
    )
    logger.debug(f"result = {result}")

def downgrade() -> None:
    """Revert schema changes.

    Example:
        op.drop_table("user")
    """
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_sys_map_category', table_name='SYS_MAP')
    op.drop_table('SYS_MAP')
    op.drop_index('idx_sys_dict_category', table_name='SYS_DICT')
    op.drop_table('SYS_DICT')
    op.drop_index('idx_user_role_user_auth_id', table_name='AUTH_USER_ROLE')
    op.drop_index('idx_user_role_role', table_name='AUTH_USER_ROLE')
    op.drop_table('AUTH_USER_ROLE')
    op.drop_index('idx_user_profile_user_auth_id', table_name='AUTH_USER_PROFILE')
    op.drop_table('AUTH_USER_PROFILE')
    op.drop_index('idx_user_metadata_user_id', table_name='AUTH_USER_METADATA')
    op.drop_index('idx_user_metadata_type', table_name='AUTH_USER_METADATA')
    op.drop_table('AUTH_USER_METADATA')
    op.drop_index('idx_user_identity_user_id', table_name='AUTH_USER_IDENTITY')
    op.drop_index('idx_user_identity_provider', table_name='AUTH_USER_IDENTITY')
    op.drop_table('AUTH_USER_IDENTITY')
    op.drop_index('idx_auth_user_role', table_name='AUTH_USER')
    op.drop_index('idx_auth_user_email', table_name='AUTH_USER')
    op.drop_table('AUTH_USER')
    # ### end Alembic commands ###
