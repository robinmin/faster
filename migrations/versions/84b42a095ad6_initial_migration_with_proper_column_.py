"""initial migration with proper column naming convention

Revision ID: 84b42a095ad6
Revises:
Create Date: 2025-09-03 22:04:05.439669

"""

from collections.abc import Sequence
import logging

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision: str = "84b42a095ad6"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None

logger = logging.getLogger(__name__)


# Usage sample:
#
# from sqlalchemy.sql import text
# from sqlalchemy.orm import Session
#
# conn = op.get_bind()
#
# # create session based on connection
# session = Session(bind=conn)
#
# # Or, call execute directly with conn
# conn.execute(
#     text("INSERT INTO metadata (key, value) VALUES (:key, :value)"),
#     {"key": key, "value": value},
# )


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    _ = op.create_table(
        "SYS_DICT",
        sa.Column("N_IN_USED", sa.Integer(), server_default="1", nullable=False),
        sa.Column("D_CREATED_AT", sa.DateTime(), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False),
        sa.Column("D_UPDATED_AT", sa.DateTime(), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False),
        sa.Column("D_DELETED_AT", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("C_CATEGORY", sa.String(length=64), nullable=False),
        sa.Column("N_KEY", sa.Integer(), nullable=False),
        sa.Column("C_VALUE", sa.String(length=64), nullable=False),
        sa.Column("N_ORDER", sa.Integer(), server_default="0", nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("C_CATEGORY", "N_KEY", name="uk_sys_dict_category_key"),
    )
    op.create_index("idx_sys_dict_category", "SYS_DICT", ["C_CATEGORY"], unique=False)
    _ = op.create_table(
        "SYS_MAP",
        sa.Column("N_IN_USED", sa.Integer(), server_default="1", nullable=False),
        sa.Column("D_CREATED_AT", sa.DateTime(), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False),
        sa.Column("D_UPDATED_AT", sa.DateTime(), server_default=sa.text("(CURRENT_TIMESTAMP)"), nullable=False),
        sa.Column("D_DELETED_AT", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("C_CATEGORY", sa.String(length=64), nullable=False),
        sa.Column("C_LEFT_VALUE", sa.String(length=64), nullable=False),
        sa.Column("C_RIGHT_VALUE", sa.String(length=64), nullable=False),
        sa.Column("N_ORDER", sa.Integer(), server_default="0", nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("C_CATEGORY", "C_LEFT_VALUE", "C_RIGHT_VALUE", name="uk_sys_map_category_left_right"),
    )
    op.create_index("idx_sys_map_category", "SYS_MAP", ["C_CATEGORY"], unique=False)
    # ### end Alembic commands ###

    # Add metadata into SYS_MAP table
    conn = op.get_bind()
    result = conn.execute(
        text("""
        INSERT INTO SYS_MAP (C_CATEGORY, C_LEFT_VALUE, C_RIGHT_VALUE, N_ORDER) VALUES
        ('tag_role', 'sys', 'developer', 1),
        ('tag_role', 'dev', 'developer', 2),
        ('tag_role', 'auth', 'developer', 3);
        """)
    )
    logger.debug(f"result = {result}")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_sys_map_category", table_name="SYS_MAP")
    op.drop_table("SYS_MAP")
    op.drop_index("idx_sys_dict_category", table_name="SYS_DICT")
    op.drop_table("SYS_DICT")
    # ### end Alembic commands ###
