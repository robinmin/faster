name: üöÄ Deploy to Cloudflare Workers

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  PYTHON_VERSION: '3.10'
  UV_VERSION: '0.4.18'

jobs:
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        test-method: [native, docker]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python (native tests)
        if: matrix.test-method == 'native'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ‚ö° Install UV (native tests)
        if: matrix.test-method == 'native'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: üê≥ Set up Docker Buildx (docker tests)
        if: matrix.test-method == 'docker'
        uses: docker/setup-buildx-action@v3

      # Native testing with GitHub Actions services
      - name: üß™ Run Native Tests
        if: matrix.test-method == 'native'
        services:
          postgres:
            image: postgres:15
            env:
              POSTGRES_PASSWORD: testpass
              POSTGRES_USER: testuser
              POSTGRES_DB: testdb
            options: >-
              --health-cmd pg_isready
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5
            ports:
              - 5432:5432

          redis:
            image: redis:7-alpine
            options: >-
              --health-cmd "redis-cli ping"
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5
            ports:
              - 6379:6379
        run: |
          uv sync --dev
          make lint
          make test
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          TEST_DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb

      # Docker-based testing (closer to production environment)
      - name: üê≥ Run Docker Tests
        if: matrix.test-method == 'docker'
        run: |
          make ci-docker-test

      - name: üìä Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-method }}
          path: |
            build/htmlcov/
            tests/e2e/test-results/
            tests/e2e/screenshots/

  deploy-staging:
    name: üöÄ Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    if: contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc')

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ‚ö° Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: üì¶ Install dependencies
        run: |
          uv sync

      - name: üîß Install Wrangler
        run: npm install -g wrangler

      - name: üêç Prepare Native Python Workers
        run: |
          echo "‚úÖ No build step needed - using native Python Workers!"

      - name: üöÄ Deploy to Staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Set secrets in Cloudflare Workers
          echo "${{ secrets.STAGING_DATABASE_URL }}" | wrangler secret put DATABASE_URL --env staging
          echo "${{ secrets.STAGING_REDIS_URL }}" | wrangler secret put REDIS_URL --env staging
          echo "${{ secrets.STAGING_SUPABASE_URL }}" | wrangler secret put SUPABASE_URL --env staging
          echo "${{ secrets.STAGING_SUPABASE_ANON_KEY }}" | wrangler secret put SUPABASE_ANON_KEY --env staging
          echo "${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}" | wrangler secret put SUPABASE_SERVICE_ROLE_KEY --env staging

          # Deploy to staging environment
          wrangler deploy --env staging

  deploy-production:
    name: üåü Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    environment: production
    if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')"

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ‚ö° Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: üì¶ Install dependencies
        run: |
          uv sync

      - name: üîß Install Wrangler
        run: npm install -g wrangler

      - name: üêç Prepare Native Python Workers
        run: |
          echo "‚úÖ No build step needed - using native Python Workers!"

      - name: üåü Deploy to Production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Set secrets in Cloudflare Workers
          echo "${{ secrets.PROD_DATABASE_URL }}" | wrangler secret put DATABASE_URL --env production
          echo "${{ secrets.PROD_REDIS_URL }}" | wrangler secret put REDIS_URL --env production
          echo "${{ secrets.PROD_SUPABASE_URL }}" | wrangler secret put SUPABASE_URL --env production
          echo "${{ secrets.PROD_SUPABASE_ANON_KEY }}" | wrangler secret put SUPABASE_ANON_KEY --env production
          echo "${{ secrets.PROD_SUPABASE_SERVICE_ROLE_KEY }}" | wrangler secret put SUPABASE_SERVICE_ROLE_KEY --env production

          # Deploy to production environment
          wrangler deploy --env production

      - name: üìä Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## üöÄ Deployment Summary

            **Version**: ${{ github.ref }}
            **Environment**: Production
            **Deployed to**: Cloudflare Workers

            ### ‚úÖ What was deployed:
            - Latest FastAPI application code
            - Updated database migrations
            - Environment-specific configurations

            ### üîó Links:
            - **Production URL**: https://faster-app-prod.your-account.workers.dev
            - **Health Check**: https://faster-app-prod.your-account.workers.dev/health

            ---
            *Automatically generated deployment release*
          draft: false
          prerelease: false