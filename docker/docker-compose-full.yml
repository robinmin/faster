# version: '3.8'

services:
  # Traefik - Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=your-email@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_le:/letsencrypt
    networks:
      - web
    depends_on:
      - app

  # Your FastAPI Application
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: faster-app-full
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`app.localhost`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app.loadbalancer.server.port=8000"
    env_file:
      - .env.prod  # File-based production environment
    depends_on:
      - redis
    volumes:
      - ../:/app              # Mount source code
      - app_data:/app/data   # Persistent SQLite data
    command: uv run gunicorn -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --workers 4 main:app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - web
      - backend

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis-cache-full
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - backend

# Using external Supabase service from environment configuration
# No local Supabase containers needed - app connects to cloud Supabase directly

volumes:
  app_data:        # SQLite database storage
  redis_data:      # Redis persistence
  traefik_le:      # Traefik Let's Encrypt certificates

networks:
  web:
    driver: bridge
  backend:
    driver: bridge
