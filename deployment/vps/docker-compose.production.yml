version: '3.8'

networks:
  traefik:
    external: true
  internal:
    external: false

services:
  app:
    build:
      context: ../..
      dockerfile: docker/Dockerfile
    environment:
      - ENVIRONMENT=production
      - DEPLOYMENT_PLATFORM=vps
      - VPS_REVERSE_PROXY=true
      - VPS_ENABLE_METRICS=true
      - VPS_PROCESS_MANAGER=uvicorn
      - AUTO_SCALE_WORKERS=true
      - MIN_WORKERS=2
      - MAX_WORKERS=8
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./static:/app/static:ro
      - ./logs:/app/logs
    networks:
      - traefik
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"
      
      # HTTP to HTTPS redirect
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      
      # Main application routes
      - "traefik.http.routers.faster-app.rule=Host(`${APP_DOMAIN}`)"
      - "traefik.http.routers.faster-app.entrypoints=web"
      - "traefik.http.routers.faster-app.middlewares=https-redirect"
      
      - "traefik.http.routers.faster-app-secure.rule=Host(`${APP_DOMAIN}`)"
      - "traefik.http.routers.faster-app-secure.entrypoints=websecure"
      - "traefik.http.routers.faster-app-secure.tls=true"
      - "traefik.http.routers.faster-app-secure.tls.certresolver=letsencrypt"
      
      # Load balancer
      - "traefik.http.services.faster-app.loadbalancer.server.port=8000"
      - "traefik.http.services.faster-app.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.faster-app.loadbalancer.healthcheck.interval=30s"
      
      # Rate limiting middleware
      - "traefik.http.middlewares.rate-limit.ratelimit.average=100"
      - "traefik.http.middlewares.rate-limit.ratelimit.period=1m"
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=50"
      
      # Security headers middleware
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      
      # API routes with rate limiting and security
      - "traefik.http.routers.faster-app-secure.middlewares=rate-limit,security-headers"

  redis:
    image: redis:alpine
    networks:
      - internal
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data: