[project]
name = "faster"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "asyncpg>=0.30.0",
    "celery>=5.5.3",
    "fastapi>=0.116.1",
    "httpx>=0.28.1",
    "prometheus-client>=0.22.1",
    "pydantic[email]>=2.11.7",
    "pydantic-settings>=2.10.1",
    "pytest-httpx>=0.35.0",
    "python-dotenv>=1.1.1",
    "redis[hiredis]>=4.2.0",
    "sqlmodel>=0.0.24",
    "structlog>=25.4.0",
    "supabase>=2.18.1",
    "supabase-auth>=0.1.1",
    "tenacity>=9.1.2",
    "uvicorn[standard]>=0.35.0",
    "aiosqlite>=0.20.0",
    "python-jose[cryptography]>=3.5.0",
    "aioredis>=2.0.1",
    "fakeredis>=2.31.0",
    "jose>=1.0.0",
    "types-pygments>=2.19.0.20250809",
    "types-pexpect>=4.9.0.20250809",
    "types-python-jose>=3.5.0.20250531",
    "asgi-correlation-id>=4.3.4",
    "sentry-sdk[fastapi]>=2.35.1",
    "gunicorn>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "aiosqlite>=0.20.0",
    "alembic>=1.16.4",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-sugar>=1.0.0",
    "ruff>=0.12.9",
]

[tool.setuptools.packages.find]
where = ["faster"]
include = ["faster*"]
exclude = ["tests*"]

[tool.ruff]
# Exclude common directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",     # Django migrations
]

# Set line length to match Black's default
line-length = 120

# Target Python 3.10+ (adjust based on your project)
target-version = "py310"

[tool.ruff.lint]
# Enable recommended rules plus additional useful ones
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "C90", # mccabe complexity
    "PL",  # pylint
    "RUF", # ruff-specific rules
]

# Disable specific rules that might be too strict
ignore = [
    "E501",    # Line too long (handled by formatter)
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "RET504",  # Unnecessary variable assignment before return
    "SIM108",  # Use ternary operator (sometimes less readable)
]

# Allow unused variables when they start with underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Set max complexity for McCabe
mccabe = { max-complexity = 10 }

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules for test files
"tests/**/*.py" = [
    "PLR2004", # Magic values are common in tests
    "S101",    # Use of assert (expected in tests)
]
# Ignore import rules in __init__.py files
"__init__.py" = [
    "F401", # Unused import (expected in __init__.py files)
]

[tool.ruff.lint.isort]
# Configure import sorting
known-first-party = ["faster"]    # Replace with your actual package name
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.pylint]
# Set limits for pylint rules
max-args = 8
max-locals = 20
max-branches = 15

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Use spaces for indentation
indent-style = "space"

# Respect magic trailing comma
skip-magic-trailing-comma = false

# Auto-detect line ending
line-ending = "auto"

# Format docstrings
docstring-code-format = true

# Format code in docstring examples
docstring-code-line-length = 120

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "Depends",
    "fastapi.Depends",
    "fastapi.params.Depends",
]

[tool.mypy]
python_version = "3.10"
strict = true
files = ["faster/**/*.py", "main.py", "tests/**/*.py"]
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
# Applies special rules to all modules under the 'tests' directory.
module = "tests.*"
# Disable checking for untyped function definitions in tests.
# This prevents mypy from complaining if a test function doesn't have a return type.
disallow_untyped_defs = false

[tool.pyright]
typeCheckingMode = "strict"

# Specify the root directory or files to include in the analysis.
include = ["faster/**/*.py", "main.py", "tests/**/*.py"]

# Specify directories or files to exclude from analysis.
exclude = ["**/__pycache__", "**/node_modules"]

reportMissingImports = true
reportUnusedImport = true
reportUnusedVariable = true
reportImplicitStringConcatenation = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalMemberAccess = true
reportOptionalOperand = true
reportOptionalSubscript = true
reportPrivateImportUsage = true
reportPrivateUsage = true
reportUnboundVariable = true
reportUntypedBaseClass = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUntypedNamedTupleAsReturnType = true
reportUnusedCallResult = true
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportAssignmentType = false
reportArgumentType = false

[tool.pytest.ini_options]
filterwarnings = []
pythonpath = "."    # If your package is in a 'src' directory

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pyls-mypy>=0.1.8",
    "pyright>=1.1.404",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-httpx>=0.35.0",
    "pytest-mock>=3.14.1",
    "pytest-sugar>=1.0.0",
    "python-lsp-server[all]>=1.13.1",
    "ruff>=0.12.9",
]
